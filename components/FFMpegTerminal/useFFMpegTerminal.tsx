import { useCallback, useEffect, useRef, useState } from 'react';
import { FFMpegTerminal, IFFMpegFileSystem } from './Terminal';

const theme = {
  foreground: '#F8F8F8',
  background: '#2D2E2C',
  selection: '#5DA5D533',
  black: '#1E1E1D',
  brightBlack: '#262625',
  red: '#CE5C5C',
  brightRed: '#FF7272',
  green: '#5BCC5B',
  brightGreen: '#72FF72',
  yellow: '#CCCC5B',
  brightYellow: '#FFFF72',
  blue: '#5D5DD3',
  brightBlue: '#7279FF',
  magenta: '#BC5ED1',
  brightMagenta: '#E572FF',
  cyan: '#5DA5D5',
  brightCyan: '#72F0FF',
  white: '#F8F8F8',
  brightWhite: '#FFFFFF',
};

interface IUseFFMpegTerminal {
  onGeneratedFiles: (files: Array<IFFMpegFileSystem>) => Promise<void>;
}

/**
 * A custom hook to abstract FFMpegTerminal component's logic from UI
 * @param onGeneratedFiles - callback to run when new files are generated by ffmpeg terminal
 */
const useFFMpegTerminal = ({
  onGeneratedFiles = async () => undefined,
}: IUseFFMpegTerminal) => {
  const terminalElRef = useRef<HTMLDivElement>(null);
  const [terminal, setTerminal] = useState<FFMpegTerminal | null>(null);
  const [terminalSystemFiles, setTerminalSystemFiles] =
    useState<Array<IFFMpegFileSystem>>();

  // Update terminal system files
  useEffect(() => {
    if (
      terminal &&
      terminal.files.system &&
      terminalSystemFiles &&
      terminalSystemFiles.length > 0
    ) {
      terminal.files.system = terminalSystemFiles;
    }
  }, [terminal, terminalSystemFiles]);

  /**
   * Add ffmpeg terminal to an HTML element
   * @param element an html element used as container for ffmpeg terminal
   */
  const mountTerminalToContainer = useCallback(
    async (element: HTMLElement) => {
      // remove all child elements in terminal container
      element.innerHTML = '';

      // init terminal
      const terminal = new FFMpegTerminal({
        fontFamily: '"Cascadia Code", Menlo, monospace',
        theme: theme,
        cursorBlink: true,
        cursorStyle: 'block',
        onGeneratedFiles: onGeneratedFiles,
      });

      // mount terminal to container
      terminal.open(element);

      // setup terminal
      const isSetup = await terminal.setup();
      if (!isSetup) {
        terminal.write(
          "FFMpeg won't work correctly in this browser. Please free up memory or try on a different device and browser."
        );
        terminal.promptInput();
      }

      // fit to container when window resizes
      window.addEventListener('resize', () => terminal.fitToContainer());

      // focus input
      terminal.focus();

      // terminal state variable
      setTerminal(terminal);
    },
    [onGeneratedFiles]
  );

  /**
   * Updates the system files for ffmpeg terminal
   * @param files a list of files to add
   */
  const updateFFMpegSystemFiles = useCallback(
    (files: Array<IFFMpegFileSystem>) => setTerminalSystemFiles(files),
    []
  );

  /**
   * Copy selected text from ffmpeg terminal to clipboard
   */
  const copySelectedTextToClipboard = async () => {
    if (terminal) {
      const selectedText = terminal.getSelection().trim();

      selectedText && (await navigator.clipboard.writeText(selectedText));
    }
  };

  /**
   * Paste text from clipboard to ffmpeg terminal
   */
  const pasteClipboardTextToTerminal = async () => {
    if (
      terminal &&
      window.isSecureContext // make sure user is on https
    ) {
      const textFromClipboard: string | null = await navigator.clipboard
        .readText()
        .catch(() => null);
      if (!textFromClipboard) return;

      terminal.write(textFromClipboard.trim());
      terminal.focus();

      terminal.activeCommand = textFromClipboard;
    }
  };

  /**
   * Clears the ffmpeg terminal
   */
  const clearTerminal = () => terminal?.clear();

  /**
   * Execute the help command on the ffmpeg terminal
   */
  const runHelpCommand = () => {
    if (terminal) {
      terminal.commandList['help'].exec(terminal);

      terminal.focus();

      terminal.activeCommand = '';
    }
  };

  return {
    terminalElRef,
    mountTerminalToContainer,
    updateFFMpegSystemFiles,
    copySelectedTextToClipboard,
    pasteClipboardTextToTerminal,
    clearTerminal,
    runHelpCommand,
  };
};

export default useFFMpegTerminal;
